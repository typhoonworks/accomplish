name: Elixir CI

on:
  pull_request:
  push:

jobs:
  build:
    name: "Build and test (${{ matrix.mix_env }}, ${{ matrix.postgres_image }})"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        mix_env: ["test"]
        postgres_image: ["postgres:16"]

    env:
      MIX_ENV: ${{ matrix.mix_env }}
      CACHE_VERSION: v1
    services:
      postgres:
        image: ${{ matrix.postgres_image }}
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: marocchino/tool-versions-action@v1
        id: versions

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - uses: erlef/setup-elixir@v1
        with:
          elixir-version: ${{ steps.versions.outputs.elixir }}
          otp-version: ${{ steps.versions.outputs.erlang }}

      - uses: actions/cache@v4
        with:
          path: |
            deps
            _build
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-mix-${{ env.MIX_ENV }}-${{ hashFiles('mix.lock', 'Cargo.lock') }}

      - name: Build Rust NIF modules
        working-directory: ./
        run: cargo build --manifest-path ./Cargo.toml

      - run: mix deps.get --only $MIX_ENV
      - run: mix compile --warnings-as-errors

      - run: mix test
        env:
          MIX_ENV: test

  static:
    name: Static checks (Elixir)
    runs-on: ubuntu-latest
    env:
      MIX_ENV: test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: marocchino/tool-versions-action@v1
        id: versions

      - uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: static-${{ runner.os }}-mix-${{ hashFiles('mix.lock') }}

      - run: mix deps.get
      - run: mix compile --warnings-as-errors --all-warnings
      - run: mix format --check-formatted
      - run: mix deps.unlock --check-unused
      - run: mix credo diff --from-git-merge-base origin/main

  rust-static:
    name: Rust static checks (NIF only)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Check Rust formatting
        run: cargo fmt --all --check --exclude cli

      - name: Run Clippy
        run: cargo clippy --manifest-path=./Cargo.toml --all-targets --all-features -- -D warnings
